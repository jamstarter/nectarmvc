<style type='text/css'>
.cli{
	padding:10px;
	background:#000;
	color:#fff;
	border-radius:10px;
}
</style>

<div class='container'>
<h1>Nectar Documentation</h1>

<a href="https://github.com/jamstarter/nectarmvc/archive/master.zip"><input type='button' class='btn btn-primary btn-lg' value='Download Latest'></a>

<h2>Setting up Apache</h2>
Before you can start to use Nectar, you'll need to setup apache with the proper settings.<br>
In your apache configuration file, make sure you have a section that looks like this, pointing to the /public folder.<br>
<xmp>
<VirtualHost *:80>
        ServerName mydomain.com
        ServerAdmin webmaster@localhost
        DocumentRoot /var/www/myapplication/public

        <Directory /var/www/myapplication/public>
                Options Indexes FollowSymLinks
                AllowOverride All
        </Directory>
</VirtualHost>
</xmp>
<br>
<h3>Enable Mod Rewrite</h3>
You will also need to enable mod rewrite so you can have configurable URLs:
<xmp>a2enmod rewrite</xmp>
<br>
<h2>Setup Your Database</h2>
Edit <b>application.ini</b> and input your database credentials<br>
<xmp>;======================================
; Database Settings
;======================================
resources.db.adapter = PDO_MYSQL
resources.db.isDefaultAdapter = true
resources.db.host = localhost
resources.db.username = dbuser
resources.db.password = **********
resources.db.database = mydatabase</xmp>
<br>
<h2>Directory Structure</h2>
<p>Here's an overview of the directory structure of Nectar. The default 'docs' modules comes included with the framework.</p>
<xmp>
app
  |_layouts              => All project layouts
    |_layout.twig        => The layout of the site
  |_modules              => All of your modules go in this folders
    |_docs               => Module folder
      |_configs          => Module Configs
        |_routes.ini     => Routes for the modules
      |_controllers      => Controllers for the module
      |_models           => Models for the module
      |_sql              => SQL files to run on migrate
      |_views            => Views for your module (Twig)
  |_application.ini      => Global application configuration (database,api keys, etc)
  |_routes.ini           => Global routes (combined with module routes)
cli                      => CLI files
  |_cli                  => Executable cli command
  |_cliactions           => All CLI actions go here
  |_clibootstrap.php     => Boostrap for the CLI
library                  => System / Third-party libraries
  |_system               => Nectar System Files
  |_vendors              => 3rd Party Libraries
public                   => Public Folder
  |_.htaccess            => .htaccess file (rewrite rules)
  |_index.php            => Front Controller
</xmp>
<br><br>
<h2>Accessing Variables From a Controller</h2>
You can access $_POST and $_GET variables from within a controller using the following:
<xmp class='cli'>$post = $this->_post;     // Get $_POST variables
$get = $this->_get;       // Get $_GET variables
$params = $this->_params; // Get a combo of $_POST and $_GET
</xmp>
<br><br>

<h2>Sending data to the view</h2>
You can send data to a view by using $this->view from the controller method corresponding to your view.
<xmp class='cli'>$this->view->myVar = "Hello";
$this->view->user = $usersModel->getById(35);</xmp>
<br>
In the view twig file, you can use that variable like this:
<xmp class='cli'>{% verbatim %}{{myVar}}         //outputs "Hello"
{{user.email}}    //outputs user object {% endverbatim %}</xmp>

<br><br>
<h2>Command Line Interface (CLI)</h2>
<p>
The command line interface will allow you to run scripts related to your application. CLI scripts have access to all models in all modules.
<br><br>
First, cd into the cli directory of your application.<br>
<xmp class='cli'>> cd cli</xmp>
<br>
To see available methods, run the ./cli command.<br >
<xmp class='cli'>> ./cli
      
    _   __          __            
   / | / /__  _____/ /_____ ______
  /  |/ / _ \/ ___/ __/ __ `/ ___/
 / /|  /  __/ /__/ /_/ /_/ / /    
/_/ |_/\___/\___/\__/\__,_/_/     
                                
CLI Command Line Interface for Nectar 
To run a command, type 'php cli.php [commandName]' then hit Enter


Available Commands: 
generateModule [name] - Generate a skeleton module
testCLI - Test the CLI
</xmp>
<br>
To run a command, use the command with the ./cli command.<br>
<xmp class='cli'>> ./cli testCLI


 CLI WORKS!!! </xmp>
<br>

If you received an error when you ran ./cli, you may need to set the cli file to be executable.<br>
<xmp class='cli'>> chmod +x cli</xmp>

</p>


<h2>Generating a Module with the CLI</h2>
You can generate a skeleton module by running the following command, replace "myModule" with the name of your new module.<br>
<xmp class='cli'>> ./cli generateModule myModule</xmp>
<br>
You will be presented with the results and given a URI to use to view the first view of your module in your browser.<br>
<xmp class='cli'>> ./cli generateModule myModule


Generating Module mymodule... 

Creating Directory... 
Creating Controller... 
Creating Model... 
Creating View... 
Creating Routes... 
Creating Folder for SQL... 
mymodule created in /var/www/framework/app/modules/mymodule 
Complete.

Navigate to /mymodule/index to view your new module!</xmp>
</div>